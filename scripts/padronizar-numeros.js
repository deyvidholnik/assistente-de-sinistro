/**
 * Script para padronizar n√∫meros de sinistro
 * Executa a migra√ß√£o de formato antigo (ex: 25081712345) para SIN-YYYY-NNNNNN
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function verificarSinistrosNaoPadronizados() {
  console.log('üîç Verificando sinistros com formato n√£o padronizado...')
  
  const { data, error } = await supabase
    .from('sinistros')
    .select('id, numero_sinistro, data_criacao, created_by_manager')
    .not('numero_sinistro', 'like', 'SIN-%-%')
    .order('data_criacao')
  
  if (error) {
    console.error('‚ùå Erro ao buscar sinistros:', error)
    return []
  }
  
  console.log(`üìä Encontrados ${data.length} sinistros com formato n√£o padronizado`)
  
  if (data.length > 0) {
    console.log('\nüìã Sinistros n√£o padronizados:')
    data.forEach(sinistro => {
      console.log(`  - ${sinistro.numero_sinistro} (${sinistro.data_criacao}) ${sinistro.created_by_manager ? '[Gerente]' : '[Cliente]'}`)
    })
  }
  
  return data
}

async function obterProximoNumeroSequencial() {
  const anoAtual = new Date().getFullYear()
  const prefixo = `SIN-${anoAtual}-`
  
  const { data, error } = await supabase
    .from('sinistros')
    .select('numero_sinistro')
    .like('numero_sinistro', `${prefixo}%`)
    .order('numero_sinistro', { ascending: false })
    .limit(1)
  
  if (error) {
    console.error('‚ùå Erro ao buscar √∫ltimo n√∫mero:', error)
    return 1
  }
  
  if (!data || data.length === 0) {
    return 1
  }
  
  const ultimoNumero = data[0].numero_sinistro
  const numeroAtual = parseInt(ultimoNumero.split('-')[2])
  return numeroAtual + 1
}

async function gerarNovosNumeros(sinistrosNaoPadronizados) {
  let proximoNumero = await obterProximoNumeroSequencial()
  
  const novosNumeros = sinistrosNaoPadronizados.map(sinistro => {
    const dataCriacao = new Date(sinistro.data_criacao)
    const ano = dataCriacao.getFullYear()
    const numeroFormatado = proximoNumero.toString().padStart(6, '0')
    const novoNumero = `SIN-${ano}-${numeroFormatado}`
    
    proximoNumero++
    
    return {
      id: sinistro.id,
      numeroAntigo: sinistro.numero_sinistro,
      numeroNovo: novoNumero
    }
  })
  
  return novosNumeros
}

async function executarPadronizacao(novosNumeros) {
  console.log('\nüîÑ Iniciando padroniza√ß√£o...')
  
  for (const { id, numeroAntigo, numeroNovo } of novosNumeros) {
    console.log(`  üìù ${numeroAntigo} ‚Üí ${numeroNovo}`)
    
    const { error } = await supabase
      .from('sinistros')
      .update({ 
        numero_sinistro: numeroNovo,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
    
    if (error) {
      console.error(`‚ùå Erro ao atualizar ${numeroAntigo}:`, error)
      return false
    }
  }
  
  console.log('‚úÖ Padroniza√ß√£o conclu√≠da!')
  return true
}

async function atualizarSequencia() {
  console.log('\nüî¢ Atualizando sequ√™ncia do banco...')
  
  // Buscar o maior n√∫mero sequencial atual
  const anoAtual = new Date().getFullYear()
  const { data, error } = await supabase
    .from('sinistros')
    .select('numero_sinistro')
    .like('numero_sinistro', `SIN-${anoAtual}-%`)
    .order('numero_sinistro', { ascending: false })
    .limit(1)
  
  if (error) {
    console.error('‚ùå Erro ao buscar maior n√∫mero:', error)
    return
  }
  
  if (data && data.length > 0) {
    const ultimoNumero = parseInt(data[0].numero_sinistro.split('-')[2])
    const proximoValor = ultimoNumero + 1
    
    // Executar SQL para atualizar a sequ√™ncia
    const { error: seqError } = await supabase.rpc('atualizar_sequencia_sinistro', {
      novo_valor: proximoValor
    })
    
    if (seqError) {
      console.log(`üìù Sequ√™ncia deve ser atualizada manualmente para: ${proximoValor}`)
      console.log(`   Execute: SELECT setval('sinistro_seq', ${proximoValor});`)
    } else {
      console.log(`‚úÖ Sequ√™ncia atualizada para: ${proximoValor}`)
    }
  }
}

async function main() {
  console.log('üöÄ Iniciando padroniza√ß√£o de n√∫meros de sinistro...\n')
  
  try {
    // 1. Verificar sinistros n√£o padronizados
    const sinistrosNaoPadronizados = await verificarSinistrosNaoPadronizados()
    
    if (sinistrosNaoPadronizados.length === 0) {
      console.log('‚úÖ Todos os sinistros j√° est√£o padronizados!')
      return
    }
    
    // 2. Gerar novos n√∫meros
    const novosNumeros = await gerarNovosNumeros(sinistrosNaoPadronizados)
    
    console.log('\nüìã Pr√©via das altera√ß√µes:')
    novosNumeros.forEach(({ numeroAntigo, numeroNovo }) => {
      console.log(`  ${numeroAntigo} ‚Üí ${numeroNovo}`)
    })
    
    // 3. Confirmar execu√ß√£o
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o alterar√° os n√∫meros de sinistro!')
    console.log('Digite "CONFIRMAR" para prosseguir ou qualquer outra coisa para cancelar:')
    
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })
    
    rl.question('> ', async (answer) => {
      if (answer.toUpperCase() === 'CONFIRMAR') {
        // 4. Executar padroniza√ß√£o
        const sucesso = await executarPadronizacao(novosNumeros)
        
        if (sucesso) {
          // 5. Atualizar sequ√™ncia
          await atualizarSequencia()
          
          // 6. Verificar resultado final
          const sinistrosRestantes = await verificarSinistrosNaoPadronizados()
          if (sinistrosRestantes.length === 0) {
            console.log('\nüéâ Padroniza√ß√£o conclu√≠da com sucesso!')
          } else {
            console.log(`\n‚ö†Ô∏è  Ainda restam ${sinistrosRestantes.length} sinistros n√£o padronizados`)
          }
        }
      } else {
        console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio')
      }
      
      rl.close()
    })
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o:', error)
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main()
}

module.exports = { main }